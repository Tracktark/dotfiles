* Default config
** User identification
#+begin_src elisp
(setq user-full-name "Richard Závodský"
      user-mail-address "zavodsky.richard1@gmail.com")
#+end_src

** Org config
#+begin_src elisp
(setq org-directory "~/org/"
      org-agenda-files '("~/org/todo.org"))
#+end_src

* Custom config
** Emacs
- Start maximized
  #+begin_src elisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
  #+end_src
- Set font
  #+begin_src elisp
(setq doom-font (font-spec :family "JetBrainsMono" :size 13 :weight 'semi-bold))
  #+end_src
- Set theme
  #+begin_src elisp
(setq doom-theme 'doom-nord)
  #+end_src

** Evil
- Make substitutions global by default
  #+begin_src elisp
(after! evil
  (setq evil-ex-substitute-global t))
  #+end_src
- o/O shouldn't continue comments
  #+begin_src elisp
(after! evil
  (setq +evil-want-o/O-to-continue-comments nil))
  #+end_src

** Ivy
- Remove remapping of projectile-compile-project
  #+begin_src elisp
(use-package! counsel
  :defer t
  :init
  (define-key!
    [remap projectile-compile-project] 'projectile-compile-project))
  #+end_src

** CompilationMode
- Automatically close compilation buffer after 1 second if compilation succeeded
  #+begin_src elisp
(defun autoclose-buffer-after-compilation (cur_buffer msg)
(when (string-match "finished" msg)
    (run-with-timer 1 nil (lambda (buff)
                            (kill-buffer buff))
                    cur_buffer))
)
;; (add-hook 'compilation-finish-functions 'autoclose-buffer-after-compilation)
  #+end_src
- Allow compile to read compilation command straight from ~compile-command~
  #+begin_src elisp
(setq compilation-read-command nil)
  #+end_src

** Company
- Change company backends to make sorting better
  #+begin_src elisp
(setq +lsp-company-backends '(:separate company-capf comapny-yasnippet))
  #+end_src
- Make company not autocomplete by default, only on request
#+begin_src elisp
(after! company
  (setq company-idle-delay nil))
#+end_src

** Mu4e
Create 3 contexts, one for personal emails, one for work, and one for school. Context is autmatically switched based on which maildir the email is in
#+begin_src elisp
(after! mu4e
  (setq mu4e-contexts
        `( ,(make-mu4e-context
             :name "Personal"
             :match-func (lambda (msg)
                           (when msg
                             (string-match-p "^/personal" (mu4e-message-field msg :maildir))))
             :vars '((user-mail-address . "riso.zavodsky1@gmail.com")
                     (user-full-name . "Rišo Závodský")
                     (mu4e-compose-signature . "\nRišo Závodský")
                     (mu4e-sent-folder . "/personal/sent")
                     (mu4e-drafts-folder . "/personal/drafts")
                     (mu4e-trash-folder . "/personal/trash")
                     (mu4e-refile-folder . "/personal/INBOX")))
           ,(make-mu4e-context
             :name "Work"
             :match-func (lambda (msg)
                           (when msg
                             (string-match-p "^/work" (mu4e-message-field msg :maildir))))
             :vars '((user-mail-address . "zavodsky.richard1@gmail.com")
                     (user-full-name . "Richard Závodský")
                     (mu4e-compose-signature . "\nRichard Závodský")
                     (mu4e-sent-folder . "/work/sent")
                     (mu4e-drafts-folder . "/work/drafts")
                     (mu4e-trash-folder . "/work/trash")
                     (mu4e-refile-folder . "/work/INBOX")))
           ,(make-mu4e-context
             :name "School"
             :match-func (lambda (msg)
                           (when msg
                             (string-match-p "^/school" (mu4e-message-field msg :maildir))))
             :vars '((user-mail-address . "zavodsky1@stud.uniza.sk")
                     (user-full-name . "Richard Závodský")
                     (mu4e-compose-signature . "\nRichard Závodský")
                     (mu4e-sent-folder . "/school/Sent")
                     (mu4e-drafts-folder . "/school/Drafts")
                     (mu4e-trash-folder . "/school/Trash")
                     (mu4e-refile-folder . "/school/INBOX")))))
  (setq mu4e-context-policy 'pick-first
        mu4e-compose-context-policy nil))
#+end_src

** Vterm
- Add ~man~ to the eval commands
  #+begin_src elisp
(after! vterm (setq vterm-eval-cmds (append vterm-eval-cmds '(("man" man)))))
  #+end_src
** Volar
#+begin_src elisp
(use-package! lsp-volar)
#+end_src
Start lsp in .vue buffers and remove script padding
#+begin_src elisp
(add-hook! web-mode
           (when (string-match-p "\.vue$" buffer-file-name)
             (lsp)
             (set (make-local-variable 'web-mode-script-padding) 0)))
#+end_src

** Dashboard
- Configure dashboard
  #+begin_src elisp
(use-package! dashboard
  :config
  (dashboard-setup-startup-hook))
  #+end_src
- Make emacsclient always open on dashboard
  #+begin_src elisp
(setq initial-buffer-choice (cmd! (get-buffer "*dashboard*")))
  #+end_src
- Make dashboard the fallback buffer
  #+begin_src elisp
(setq doom-fallback-buffer-name "*dashboard*")
  #+end_src
- Record the working directory of last opened project
  #+begin_src elisp
(defvar dashboard-last-default-directory nil)
(defun update-dashboard ()
  (let ((lastcwd (or (doom-project-root dashboard-last-default-directory) dashboard-last-default-directory)))
    (with-current-buffer (doom-fallback-buffer)
      (setq-local default-directory (concat (directory-file-name lastcwd) "/")))))
(add-hook 'doom-switch-buffer-hook (cmd!
                                    (cond ((eq (current-buffer) (get-buffer "*dashboard*"))
                                                (revert-buffer))
                                          ((and (not (file-remote-p default-directory)) (doom-real-buffer-p (current-buffer)))
                                                (setq dashboard-last-default-directory default-directory)
                                                (update-dashboard)))))
  #+end_src

** Dired
- Add mode for hiding dotfiles
  #+begin_src emacs-lisp
(define-minor-mode dired-hide-dotfiles-mode
  "Toggle dired-hide-dotfiles-mode"
  :init-value nil
  :group 'dired
  (if dired-hide-dotfiles-mode
      (progn
        (add-hook 'dired-after-readin-hook 'dired-hide-dotfiles)
        (dired-hide-dotfiles))
    (remove-hook 'dired-after-readin-hook 'dired-hide-dotfiles)
    (revert-buffer)))

(defun dired-hide-dotfiles ()
  "Hide all files in a dired buffer"
  (dired-mark-files-regexp "^\\.")
  (dired-do-kill-lines nil ""))

(map!
 :map 'dired-mode-map
 :localleader
 :desc "Toggle hiding dotfiles" "j" 'dired-hide-dotfiles-mode)
(dired-hide-dotfiles-mode t)
  #+end_src
** Ligatures
- Enable only in org mode and lisp mode
  #+begin_src elisp
(setq +ligatures-extras-in-modes '(org-mode emacs-lisp-mode))
  #+end_src

* Keybinds
- SPC SPC~ to open M-x, SPC b b~ to open buffer switcher, SPC TAB~ to switch to last buffer
  #+begin_src elisp
(map! :leader
      :desc "Open M-x" "SPC" 'execute-extended-command
      :desc "Choose buffer" "b b" '+ivy/switch-buffer
      :desc "Switch to last buffer" "TAB" 'evil-switch-to-windows-last-buffer
      :desc "Jump to one or more characters" "j" 'evil-avy-goto-char-timer)
  #+end_src

- Change local leader key to ,
  #+begin_src elisp
(setq doom-localleader-key ",")
  #+end_src

- Change worksapce map prefix to W from TAB
  #+begin_src elisp
(map! :leader :desc "workspace" "W" doom-leader-workspace-map)
  #+end_src
- Use ~SPC 1-9~ to switch windows
  #+begin_src elisp
(map! :leader
      :desc "Switch to window 1" "1" 'winum-select-window-1
      :desc "Switch to window 2" "2" 'winum-select-window-2
      :desc "Switch to window 3" "3" 'winum-select-window-3
      :desc "Switch to window 4" "4" 'winum-select-window-4
      :desc "Switch to window 5" "5" 'winum-select-window-5
      :desc "Switch to window 6" "6" 'winum-select-window-6
      :desc "Switch to window 7" "7" 'winum-select-window-7
      :desc "Switch to window 8" "8" 'winum-select-window-8
      :desc "Switch to window 9" "9" 'winum-select-window-9
      :desc "Switch to window 0" "0" 'winum-select-window-0-or-10)
  #+end_src

- Open eshell with SPC `
  #+begin_src elisp
(map! :leader
      :desc "Toggle eshell" "`" '+eshell/toggle)
  #+end_src

- Switch workspace with SPC S-Tab
  #+begin_src elisp
(map! :leader
      :desc "Switch to recent workspace" "<backtab>" '+workspace/other)
  #+end_src

- Set evil surrond to s instead of S
  #+begin_src elisp
(map! :mode evil-snipe-mode-map
      "s" 'nil)
(map! :v
      "s" 'evil-surround-region)
  #+end_src

- Add the SPC f c group to edit various configs
  #+begin_src elisp
(map! :leader
      :prefix "f"
      "c" 'nil)
(map! :leader
      :prefix ("fc" . "Open configuration files")
      :desc "Open .zshrc"    "z" (cmd! (find-file "/home/moss/.zshrc"))
      :desc "Open .xinitrc"  "x" (cmd! (find-file "/home/moss/.xinitrc"))
      :desc "Open i3 config" "i" (cmd! (find-file "/home/moss/.config/i3/config")))
  #+end_src

- M-n to create a new workspace, M-d to delete it
  #+begin_src elisp
(map! :desc "Create a new workspace" "M-n" '+workspace/new
      :desc "Delete current workspace" "M-d" '+workspace/delete)
  #+end_src

- SPC o e opens eshell in current buffer
  #+begin_src elisp
(map! :leader
      :prefix "o"
      :desc "Open eshell here" "e" '+eshell/here)
  #+end_src

- SPC w w to split window vertically
  #+begin_src elisp
(map! :leader
      :desc "Split window vertically" "w w" 'evil-window-vsplit)
  #+end_src

- Set ~SPC c c~ and ~SPC c C~ to recompile and compile respectively
  #+begin_src elisp
(map! :leader
      :desc "Recompile" "c c" 'recompile
      :desc "Compile"   "c C" 'compile)
  #+end_src

- Set keybinds for Org capture
  #+begin_src elisp
(map! :leader
      :desc "Org Capture" "x" 'org-capture
      :desc "Go to Org Capture" "X" 'org-capture-goto-target)
  #+end_src


* Org Mode setup
** Org Startup Options
#+begin_src elisp
(setq org-startup-with-latex-preview t
      org-startup-with-inline-images t)
#+end_src

** Unmap C-c [, C-c ], and C-c ;
#+begin_src elisp
(map! :map org-mode-map
      "C-c [" nil
      "C-c ]" nil
      "C-c ;" nil)
#+end_src
** Map SPC a to agenda
#+begin_src elisp
(map! :map org-mode-map
      :leader
      :desc "Open org agenda" "a" 'org-agenda)
#+end_src
** Set up TODO keywords
#+begin_src elisp
(setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)"))
      org-todo-keyword-faces '(("TODO" :foreground "yellow" :weight bold)
                               ("NEXT" :foreground "blue" :weight bold)
                               ("DONE" :foreground "forest green" :weight bold)))
#+end_src
** Org-Publish
#+begin_src elisp
(setq org-publish-project-alist
      '(("school-org"
         :base-directory "~/school/"
         :base-extension "org"
         :recursive t
         :publishing-directory "/ssh:oracle:~/school-html/"
         :publishing-function org-html-publish-to-html
         :with-toc t
         :with-author nil
         :html-preamble t
         :auto-sitemap t
         :sitemap-filename "sitemap.org"
         :sitemap-title "Sitemap"
         )
        ("school-static"
         :base-directory "~/school/"
         :base-extension "png\\|svg"
         :recursive t
         :publishing-directory "/ssh:oracle:~/school-html/"
         :publishing-function org-publish-attachment
         )
        ("school"
         :components ("school-org" "school-static"))))
#+end_src
** Org Capture
#+begin_src elisp
(after! org (setq org-capture-templates
                  '(("p" "Personal Todo" entry
                     (file+headline +org-capture-todo-file "Personal")
                     "* [ ] %?\n%i" :prepend t :empty-lines-after 1)
                    ("s" "School Todo" entry
                     (file+headline +org-capture-todo-file "School")
                     "* [ ] %?\n%i" :prepend t :empty-lines-after 1)
                    ("w" "Work Todo" entry
                     (file+headline +org-capture-todo-file "Work")
                     "* [ ] %?\n%i" :prepend t :empty-lines-after 1)
                    ("P" "Personal Todo with file" entry
                     (file+headline +org-capture-todo-file "Personal")
                     "* [ ] %?\n%i\n%a" :prepend t :empty-lines-after 1)
                    ("S" "School Todo with file" entry
                     (file+headline +org-capture-todo-file "School")
                     "* [ ] %?\n%i\n%a" :prepend t :empty-lines-after 1)
                    ("W" "Work Todo with file" entry
                     (file+headline +org-capture-todo-file "Work")
                     "* [ ] %?\n%i\n%a" :prepend t :empty-lines-after 1))
                  org-capture-bookmark nil))
#+end_src
